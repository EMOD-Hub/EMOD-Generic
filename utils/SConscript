# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds utils static library
import os
from subprocess import Popen, PIPE
import pdb

Import("env")
if os.sys.platform != 'win32':
    # for getting commit/branch info either get the info directly (if we're building in a repo)
    git_rev_handle = Popen( "git rev-list HEAD --count".encode('utf-8').split(), stdout=PIPE )
    rev = str( git_rev_handle.stdout.read().rstrip() ).replace( "b", "" ).replace( "'", "" )
    
    # or look for and use an externally provided file
    root = Dir('#').abspath
    provided_version_info_file = '{0}/utils/version.provided.txt'.format(root)
    
    if rev  == "" and os.path.exists(provided_version_info_file):
        # not a git repo but a version info file has been provided externally so use the info there
        print("Using commit data supplied from: {}".format(provided_version_info_file))
        with open(provided_version_info_file) as version_file:
            version_lines = version_file.read().rstrip().splitlines()
            if len(version_lines) == 5:
                [localuser, branch, sha1, commit_date, rev] = version_lines
            else:
                os.sys.stderr.write("Unable to parse provided version info in file: {}\n".format(provided_version_info_file))
                os.sys.exit(1)
        git_date = commit_date.replace( ' ', '_' )
    else:
        git_branch_handle = Popen( "git rev-parse --abbrev-ref HEAD".split(), stdout=PIPE )
        branch = str( git_branch_handle.stdout.read().rstrip() ).replace( "b", "" ).strip( '"' ).strip( "'" )

        git_sha_handle = Popen( "git log --pretty=format:'%h' -n 1".split(), stdout=PIPE )
        sha1 = str( git_sha_handle.stdout.read().rstrip() ).replace( "b", "" ).replace( " ", "_" ).strip( '"' ).strip( "'" )

        git_date_handle = Popen( "git log -1 --pretty=%ai".encode("utf8").split(), stdout=PIPE )
        git_date = str( git_date_handle.stdout.read().rstrip() ).replace( ' ', '_' )

    #print( str( rev ) )

    print( branch )

    print( str( sha1 ) )

    if rev == "":
        rev = 0
        #rev = '"Unknown"'
    if branch == "":
        branch = "unknownbranch"
    if sha1 == "":
        sha1 = "unknownsha1"
    if git_date == "":
        git_date = "unknown_date_time"

    REV_STR = "-DREVISION_NUMBER='" + str(rev) + "'"
    env.Append( CCFLAGS=[ REV_STR ] )

    BR_STR = str('-DSCCS_BRANCH=\'"') + str(branch) + str('(') + str(sha1) + str(')"\'')
    env.Append( CCFLAGS=[ BR_STR ] )

    GIT_DATE_STR = '-DSCCS_DATE=\'"' + git_date + '"\''
    env.Append( CCFLAGS=[ GIT_DATE_STR ] )
    
    USER_STR = '-DBUILDER_NAME=\'"{0}"\''.format(os.environ['USER'])
    env.Append( CCFLAGS=[ USER_STR ] )
else:
    root = Dir('#').abspath
    version_info = '{0}\\scripts\\gitversion.cmd {0}\\utils'.format(root)
    print("Executing '{0}'".format(version_info))
    os.system(version_info)

utilsSrcFiles = [
    "BaseProperties.cpp",
    "BinaryArchiveReader.cpp",
    "BinaryArchiveWriter.cpp",
    "Configuration.cpp",
    "Configure.cpp",
    "Coredump.cpp",
    "DistributionBase.cpp",
    "DistributionsConfigurable.cpp",
    "DistributionFactory.cpp",
    "Distributions.cpp",
    "Environment.cpp",
    "Exceptions.cpp",
    "FileSystem.cpp",
    "IArchive.cpp",
    "IdmDateTime.cpp",
    "IdmMpi.cpp",
    "InterpolatedValueMap.cpp",
    "ISerializable.cpp",
    "ISupports.cpp",
    "JsonFullReader.cpp",
    "JsonFullWriter.cpp",
    "JsonObject.cpp",
    "JsonObjectDemog.cpp",
    "JsonRawReader.cpp",
    "JsonRawWriter.cpp",
    "Log.cpp",
    "MathFunctions.cpp",
    "Memory.cpp",
    "../rapidjson/modp/modp_numtoa.cpp",
    "NodeProperties.cpp",
    "PiecewiseDistributionBase.cpp",
    "ProgramOptions.cpp",
    "ProgVersion.cpp",
    "Properties.cpp",
    "RANDOM.cpp",
    "RapidJsonImpl.cpp",
    "Serializer.cpp",
    "Sigmoid.cpp",
    "StatusReporter.cpp",
    "stdafx.cpp",
    "suids.cpp",
    "Types.cpp",
    "Timers.cpp",
]

utilsIncFiles = [
    'BaseProperties.h',
    'BasePropertiesTemplates.h',
    'BoostLibWrapper.h',
    'Configuration.h',
    'ConfigurationImpl.h',
    'Configure.h',
    'EnumSupport.h',
    'Environment.h',
    'FactorySupport.h',
    "InterpolatedValueMap.h",
    'ISupports.h',
    'Log.h',
    'MathFunctions.h',
    'Memory.h',
    'ProgVersion.h',
    'Properties.h',
    'SimpleTypemapRegistration.h',
    "StatusReporter.h",
    'Sugar.h',
    'version_info.h'
]

utilsLocalInc = ['stdafx.h']

utilsLib = env.StaticLibrary('utils', utilsSrcFiles)
