# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
import os, sys, shutil, pdb


Import('env')
report_env = env.Clone()
report_env[ "REPORT_DIR" ] = 'libvectorstats'

lib_report_dllSrcFiles = [ "$REPORT_DIR/ReportVectorStatsMalaria.cpp" ]
if os.name == "nt":
    lib_report_dllSrcFiles.append( "$REPORT_DIR/stdafx.cpp" )
lib_report_dllIncFiles = [ "$REPORT_DIR/ReportVectorStatsMalaria.h" ]

base_class_obj = report_env.Object( "rvsm_ReportVectorStats", "$REPORT_DIR/ReportVectorStats.cpp" )
strain_identity_obj = report_env.Object( "rvsm_StrainIdentity", "../Eradication/StrainIdentity.cpp" )
infection_obj = report_env.Object( "rvsm_Infection", "../Eradication/Infection.cpp" )

report_env.Append(LIBS=['baseReportLib'])
report_env.Append(LIBS=['utils'])
report_env.Append(LIBS=['cajun'])

report_dir = report_env[ "BUILD_DIR" ] + 'reporter_plugins/' + report_env[ "REPORT_DIR" ]

filelist = lib_report_dllSrcFiles + strain_identity_obj + infection_obj + base_class_obj
lib_report_Dll = report_env.SharedLibrary( report_dir+"malaria", filelist  )

#print "building lib_report_dll: " + str(lib_report_Dll)

# take lib_report.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
lib_report_dllTarget = lib_report_Dll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = report_env['BUILD_VARIANT'] + '|x64'
    print ( str(lib_report_dllTarget) + ": Generating MSVS" + report_env['MSVS_VERSION'] + " project files for '%s'" % bvar )
    
    report_env.MSVSProject(target = 'Lib_report_dllScons' + report_env['MSVSPROJECTSUFFIX'],
                    srcs = lib_report_dllSrcFiles,
                    incs = lib_report_dllIncFiles,
                    localincs = lib_report_dllLocalInc,
                    buildtarget = lib_report_dllTarget,
                    auto_build_solution = 0,
                    variant = bvar)
