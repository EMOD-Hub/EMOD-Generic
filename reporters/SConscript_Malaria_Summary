# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
import os, sys, shutil

Import('env')
report_env = env.Clone()
report_env[ "REPORT_DIR" ] = 'libmalariasummary_report_plugin'

lib_report_dllSrcFiles = [ "$REPORT_DIR/MalariaSummaryReport.cpp" ]
if os.name != "posix":
    lib_report_dllSrcFiles.extend( [ "$REPORT_DIR/stdafx.cpp" ] )
lib_report_dllIncFiles = [ "$REPORT_DIR/MalariaSummaryReport.h" ]
lib_report_dllLocalInc = [ "$REPORT_DIR/stdafx.h" ]

obj_brio               = report_env.SharedObject( "msr_BaseIntervalOutput",       "../baseReportLib/BaseEventReportIntervalOutput.cpp" )
obj_ber                = report_env.SharedObject( "msr_BaseEventReport",          "../baseReportLib/BaseEventReport.cpp" )
obj_ru                 = report_env.SharedObject( "msr_ReportUtilities",          "../baseReportLib/ReportUtilities.cpp" )
obj_rum                = report_env.SharedObject( "msr_ReportUtilitiesMalaria",   "../baseReportLib/ReportUtilitiesMalaria.cpp" )
report_dir = report_env[ "BUILD_DIR" ] + 'reporter_plugins/' + report_env[ "REPORT_DIR" ]

lib_report_Dll = report_env.SharedLibrary( report_dir, lib_report_dllSrcFiles + obj_brio + obj_ber + obj_ru + obj_rum)

# take lib_report.dll (exclude .lib, .exp) out to be the building target
# to match the number of building variant
lib_report_dllTarget = lib_report_Dll[0]

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = report_env['BUILD_VARIANT'] + '|x64'
    print( str(lib_report_dllTarget) + ": Generating MSVS" + report_env['MSVS_VERSION'] + " project files for '%s'" % bvar )
    
    report_env.MSVSProject(target = 'Lib_report_dllScons' + report_env['MSVSPROJECTSUFFIX'],
                    srcs = lib_report_dllSrcFiles,
                    incs = lib_report_dllIncFiles,
                    localincs = lib_report_dllLocalInc,
                    buildtarget = lib_report_dllTarget,
                    auto_build_solution = 0,
                    variant = bvar)
