'''
Test:
- Testing if a report built from serialized data is the same as a report generated from the simulation
- generation of report from serialized data vs report generated by simulation
    - Starting from a serialized simulation at timestep d do we get the some report at day d+x?
        - need every event, i.e. serialization of every timestep (might miss events otherwise)
    - Save serialization starting at timestep d every time step for x timesteps
    - Save report at timestep d+x
    - Run test script with correct parameters, data generated by script should match data from report
- testing the correctness of the saved serialized individual data is out ot scope thus only some variables in the report are tested
'''
from __future__ import division
import dtk_test.dtk_FileTools as dft
import json
import numpy
numpy.seterr(all='raise')

# parameters
Start_Day = 23
End_Day = 67
reporting_interval = 11
DAYSPERYEAR = 365
Start_idx = 2
End_idx = 6

# constants
Falciparum_MSP_Variants = 4 #config.json
MSP1 = 1                    # CSP:0, MSP1: 1, PfEMP1_minor: 2, PfEMP1_major: 3

# globals
sum_population_by_agebin = None
sum_MSP_by_agebin = None

#output
MSP_mean_by_agebin = []


def Init(size_age_bins):
    global sum_population_by_agebin
    global sum_MSP_by_agebin
    sum_population_by_agebin = numpy.zeros(size_age_bins)
    sum_MSP_by_agebin = numpy.zeros(size_age_bins)

def Clear():
    sum_population_by_agebin.fill(0)
    sum_MSP_by_agebin.fill(0)

def GetAgeBin( age, rAges ):
    age_years = age / DAYSPERYEAR
    if age_years > rAges[-1]:
        print( "Age_Bins not large enough for population, found age(years)=", age_years," and Age_Bin.end=", rAges[-1], ".  Putting in last bin." )
        return len(rAges)-1
    else:
        return numpy.digitize([age_years], rAges, right=True)

def GenerateReportDataFromPopSerialization(output):
    with open(output + '/MalariaImmunityReport.json', 'r') as f:
        malaria_immunity_report = json.load(f)
        age_bins = malaria_immunity_report['Age Bins']

    Init(len(age_bins))

    for day in range(Start_Day, End_Day):
        print( "day: ", day )
        serialized_file = "state-" + str(day).zfill(5) + ".dtk"
        dtk = dft.read(output + '/' + serialized_file)

        # scenario has only one node so hard coding index
        individualHumans = dtk.nodes[0].individualHumans

        for ind in individualHumans:
            sum_population_by_agebin[GetAgeBin(ind.m_age, age_bins)] += ind.m_mc_weight

        for ind in individualHumans:
            msp = ind.susceptibility.m_antibodies_to_n_variations[MSP1]/Falciparum_MSP_Variants
            mspw = ind.m_mc_weight * msp
            sum_MSP_by_agebin[GetAgeBin(ind.m_age, age_bins)] += mspw

        if day%reporting_interval == 0:
            MSP_mean_by_agebin.append(sum_MSP_by_agebin / sum_population_by_agebin)
            Clear()

    # compare report with serialization
    comparison_MSP_mean_by_agebin = numpy.allclose(MSP_mean_by_agebin, numpy.array(malaria_immunity_report["MSP Mean by Age Bin"][Start_idx:End_idx]) , atol=1e-6)

    # print( "malaria_immunity_report[MSP Mean by Age Bin][2:6]: ", malaria_immunity_report["MSP Mean by Age Bin"][Start_idx:End_idx] )
    # print( "sum_population_by_agebin: ",     sum_population_by_agebin )
    # print( "MSP_mean_by_agebin: ",     MSP_mean_by_agebin )

    return  {"comparison_MSP_mean_by_agebin" : str(comparison_MSP_mean_by_agebin)}

def application(output):
    GenerateReportDataFromPopSerialization(output)

# if __name__ == "__main__":
#     application("C:/Users/tfischle/GitHub/DtkTrunk/Regression/Serialization/1300_comparison_with_report_data/output/")
