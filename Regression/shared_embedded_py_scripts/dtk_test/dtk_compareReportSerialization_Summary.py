'''
Test:
- Testing if a report built from serialized data is the same as a report generated from the simulation
- generation of report from serialized data vs report generated by simulation
    - Starting from a serialized simulation at timestep d do we get the some report at day d+x?
        - need every event, i.e. serialization of every timestep (might miss events otherwise)
    - Save serialization starting at timestep d every time step for x timesteps
    - Save report at timestep d+x
    - Run test script with correct parameters, data generated by script chould match data from report
- testing the correctness of the saved serialized individual data is out ot scope thus only some variables in the report are tested
'''
from __future__ import division
import dtk_test.dtk_FileTools as dft
import json
import numpy

# parameters
Start_Day = 23
End_Day = 67
reporting_interval = 11
DAYSPERYEAR = 365
Start_idx = 2
End_idx = 6

# globals
sum_no_infected_days = 0
sum_EIR = 0.0
sum_population_2to10 = 0
sum_parasite_positive_2to10 = 0

# output
duration_no_infection_streak = []
annual_EIRs = []
PfPRs_2to10 = []


def Clear():
    global sum_EIR
    global sum_population_2to10
    global sum_parasite_positive_2to10
    sum_EIR = 0.0
    sum_population_2to10 = 0
    sum_parasite_positive_2to10 = 0

def GenerateReportDataFromPopSerialization(output):
    global sum_EIR
    global sum_population_2to10
    global sum_parasite_positive_2to10
    with open(output + '/MalariaSummaryReport.json', 'r') as f:
        malaria_summary_report = json.load(f)
        msr_annual_eir = malaria_summary_report["DataByTime"]["Annual EIR"]
        msr_no_infection_streak = malaria_summary_report["DataByTime"]["No Infection Streak"]
        msr_no_PfPRs_2to10 = malaria_summary_report["DataByTime"]["PfPR_2to10"]

    for i in range(Start_Day, End_Day):
        serialized_file = "state-" + str(i).zfill(5) + ".dtk"
        dtk = dft.read(output + "/" + serialized_file)

        # scenario has only one node so hard coding index
        individualHumans = dtk.nodes[0].individualHumans

        if sum([ind.m_is_infected for ind in individualHumans if ind.m_is_infected]) == 0:
            sum_no_infected_days += 1
        else:
            sum_no_infected_days = 0

        # MalariaSummaryReport.cpp, array PfPRs_2to10
        for is2to10_infected_ind in [ind for ind in individualHumans if (
                ind.m_is_infected and ind.m_age > 2 * DAYSPERYEAR and ind.m_age < 10 * DAYSPERYEAR)]:
            if is2to10_infected_ind.m_parasites_detected_by_blood_smear > 0:
                sum_parasite_positive_2to10 += is2to10_infected_ind.m_mc_weight

        for is2to10_ind in [ind for ind in individualHumans if
                            ind.m_age > 2 * DAYSPERYEAR and ind.m_age < 10 * DAYSPERYEAR]:
            sum_population_2to10 += is2to10_ind.m_mc_weight

        # MalariaSummaryReport.cpp, array annual_EIRs
        vectorpopulations = [node.m_vectorpopulations for node in dtk.nodes]
        eir_temp = [v.m_EIR_by_pool.second + v.m_EIR_by_pool.first for v in vectorpopulations[0]]
        sum_EIR += sum(eir_temp)

        if i % reporting_interval == 0:
            duration_no_infection_streak.append(sum_no_infected_days)
            annual_EIRs.append(DAYSPERYEAR * sum_EIR / reporting_interval)
            PfPRs_2to10.append(sum_parasite_positive_2to10 / sum_population_2to10)
            Clear()

    comparison_duration_no_infection_streak = numpy.allclose(numpy.array(duration_no_infection_streak),
                                                             numpy.array(msr_no_infection_streak[Start_idx:End_idx]), atol=1e-6)
    comparison_annual_EIRs = numpy.allclose(numpy.array(annual_EIRs), numpy.array(msr_annual_eir[Start_idx:End_idx]), atol=1e-6)
    comparison_PfPRs_2to10 = numpy.allclose(numpy.array(PfPRs_2to10), numpy.array(msr_no_PfPRs_2to10[Start_idx:End_idx]), atol=1e-6)

    # print( "duration_no_infection_streak: ", duration_no_infection_streak, "     msr_no_infection_streak: ", msr_no_infection_streak )
    # print( "annual_EIRs: ", annual_EIRs, "        msr_annual_eir: ", msr_annual_eir )
    # print( "PfPRs_2to10: ", PfPRs_2to10, "      msr_no_PfPRs_2to10: ", msr_no_PfPRs_2to10 )

    result_dict = {"comparison_duration_no_infection_streak": str(comparison_duration_no_infection_streak),
                   "comparison_annual_EIRs" : str(comparison_annual_EIRs),
                   "comparison_PfPRs_2to10": str(comparison_PfPRs_2to10)}
    return result_dict

def application(output):
    GenerateReportDataFromPopSerialization(output)

# if __name__ == "__main__":
#     application("someoutput")
