# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds main DTK core files and generate Eradication program
import pdb
import os
import re
import xml.etree.ElementTree as et

Import('env')

if env['AllDlls'] or ( 'DiseaseDll' in env and env[ 'DiseaseDll' ] !="" ):

    eradenv = env.Clone()
    eradenv.Append(LIBS=['libgeneric_static'])
    eradenv.Append(LIBPATH=['$BUILD_DIR/libgeneric_static'])
    #eradenv.Append(LIBS=['libvector_static'])
    #eradenv.Append(LIBS=['libmalaria_static'])

    eradenv.Append(LIBPATH=['$BUILD_DIR/libgeneric'])

    eradicationSrcFiles = [  "Eradication.cpp",
                             "SimulationFactory.cpp",
                             "stdafx.cpp",
                             "Controller.cpp",
                             "ControllerFactory.cpp"]

    # Dllversion of Eradication.exe
    eradicationExe = eradenv.Program('Eradication', eradicationSrcFiles)
    eradicationIncFiles = ['SimulationFactory.h',
                           'Contexts.h']

else:

    print( env["Disease"] )

    eradicationSrcFiles = [
                            "Eradication.cpp",
    ]

    eradicationIncFiles = ['SimulationFactory.h',
                           'Contexts.h']


    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # !!! These linker flags are here so that they are not included with the DLLs.  !!!
    # !!! These are only for the EXE.                                               !!!
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    erad_env = env.Clone()
    if os.sys.platform == 'win32':
        erad_env.Append( LINKFLAGS=[ "/STACK:\"100000000,100000000\"" ] )
        erad_env.Append( LINKFLAGS=[ "/DELAYLOAD:\"python36.dll\""] )
        erad_env.Append( LIBS=["delayimp.lib"] )
        erad_env.Append(LIBPATH = ["$BUILD_DIR/Eradication"])
        erad_env.Append(LIBS=["/WHOLEARCHIVE:coreLib"])
    else:
        #NOTE: I couldn't get the use of $BUILD_DIR to work.  It kept putting in an extra '/'. 
        if env["Debug"]:
            erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,build/x64/Debug/Eradication/libcoreLib.a,build/x64/Debug/campaign/libcampaign.a,--no-whole-archive,-lsqlite3"])
        else:
            erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,build/x64/Release/Eradication/libcoreLib.a,build/x64/Release/campaign/libcampaign.a,--no-whole-archive,-lsqlite3"])

    # Monolithic
    eradicationExe = erad_env.Program('Eradication', eradicationSrcFiles)
    erad_env.Depends(eradicationExe, erad_env.Alias("CoreLibAlias") )

eradicationResource = ['Eradication.rc']
eradicationLocalInc = ['StdAfx.h']

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = env['BUILD_VARIANT'] + '|x64'
    print( "Eradication: Generating MSVS" + env['MSVS_VERSION'] + " project files for '%s'" % bvar )
    
    env.MSVSProject(target = 'EradicationScons' + env['MSVSPROJECTSUFFIX'],
                    srcs = eradicationSrcFiles,
                    incs = eradicationIncFiles,
                    localincs = eradicationLocalInc,
                    resources = eradicationResource,
                    buildtarget = eradicationExe,
                    auto_build_solution = 0,
                    variant = bvar)

else:
    print( "CC is:", env['CC'] )
    print( "CXX is:", env['CXX'] )
