# -*- mode: python; -*-
# This Python script, SConscript, invoked by the SConscript in the upper directory,
#
# 1. builds main DTK core files and generate Eradication program
import pdb
import os
import re
import xml.etree.ElementTree as et

Import('env')

if env['AllDlls'] or ( 'DiseaseDll' in env and env[ 'DiseaseDll' ] !="" ):

    print("ERROR: component tests only supported in monolithic")
else:

    print( env["Disease"] )

    testsSrcFiles = [
        "AdherentDrugTest.cpp",
        "AssortivityTest.cpp",
        "BaseEventReportTest.cpp",
        "BehaviorPfaTest.cpp",
        "CampaignEventByYearTest.cpp",
        "CommunityHealthWorkerEventCoordinatorTest.cpp",
        "componentTests.cpp",
        "ConcurrencyParametersTest.cpp",
        "FileSystemTest.cpp",
        "FlowControllerImplTest.cpp",
        "GenomeMarkersTest.cpp",
        "HIVARTStagingByCD4DiagnosticTest.cpp",
        "HIVARTStagingCD4AgnosticDiagnosticTest.cpp",
        "HIVDrawBloodTest.cpp", 
        "HIVSimpleDiagnosticTest.cpp", 
        "InterventionForCurrentPartnersTest.cpp",
        #"IncidenceEventCoordinatorTest.cpp",
        "InterpolatedValueMapTest.cpp",
        "JsonObjectDemogTest.cpp",
        "LarvalHabitatMultiplierTest.cpp",
        "LoadBalanceSchemeTest.cpp",
        "MalariaDrugTypeParametersTest.cpp",
        "MathFunctionsTest.cpp",
        "MigrateIndividualsTest.cpp",
        "MigrationTest.cpp",
        "NChooserEventCoordinatorTest.cpp",
        "NodeDemographicsTest.cpp",
        "NodePropertiesTest.cpp",
        "PairFormationParametersImplTest.cpp",
        "PairFormationStatsImplTest.cpp",
        "PrngTest.cpp",
        "ProgramOptionsTest.cpp",
        "PropertiesTest.cpp",
        "RateTableImplTest.cpp",
        "RelationshipParametersTest.cpp",
        "ReportUtilitiesMalariaTest.cpp",
        "ReportUtilitiesTest.cpp",
        "SerializationTimeCalculatorTest.cpp",
        "SigmoidTest.cpp",
        "STIIsPostDebutTest.cpp",
        "WaningEffectComboTest.cpp",
        "WaningEffectMapTest.cpp",
        "FakeLogger.cpp"
    ]

   
    testsIncFiles = [
        'common.h',
        'ICampaignCostObserverFake.h',
        'IndividualHumanContextFake.h',
        'IndividualHumanInterventionsContextFake.h',
        'INodeContextFake.h',
        'INodeEventContextFake.h',
        'ISusceptibilityHIVFake.h',
        'RandomFake.h',
    ]


    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    # !!! These linker flags are here so that they are not included with the DLLs.  !!!
    # !!! These are only for the EXE.                                               !!!
    # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    erad_env = env.Clone()
    erad_env.Append( EXTRACPPPATH=["#/UnitTest++/src"])
    erad_env.Append( LIBPATH=[ "$BUILD_DIR/UnitTest++" ] )
    erad_env.Append(LIBS=["unitTest"])

    if os.sys.platform == 'win32':
        erad_env.Append( LINKFLAGS=[ "/STACK:\"100000000,100000000\"" ] )
        erad_env.Append( LINKFLAGS=[ "/DELAYLOAD:\"python36.dll\""] )
        erad_env.Append( LIBS=["delayimp.lib"] )
        erad_env.Append(LIBPATH = ["$BUILD_DIR/Eradication"])
        erad_env.Append(LIBS=["/WHOLEARCHIVE:coreLib"])
    else:
        #erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,$BUILD_DIR/Eradication/libcoreLib.a,--no-whole-archive"])
        erad_env.Append( LIBS=[ "baseReportLib"] )
        erad_env.Append( LIBS=[ "campaign"] )
        erad_env.Append( LIBS=[ "utils"] )
        erad_env.Append( LIBS=[ "cajun"] )
        erad_env.Append( LIBS=[ "snappy"] )
        erad_env.Append( LIBS=[ "lz4"] )
        if env["Debug"]:
            erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,build/x64/Debug/Eradication/libcoreLib.a,--no-whole-archive"])
        else:
            erad_env.Append(LINKFLAGS=["-Wl,--whole-archive,build/x64/Release/Eradication/libcoreLib.a,--no-whole-archive"])

    # Monolithic
    testsExe = erad_env.Program('componentTests', testsSrcFiles)
    erad_env.Depends(testsExe, erad_env.Alias("CoreLibAlias") )
    erad_env.Depends(testsExe, erad_env.Alias("UnitTestAlias") )

testsResource = []
testsLocalInc = ['StdAfx.h']

msvc = GetOption( "MSVC" )
if msvc is not None and msvc != False and msvc != "":

    bvar = env['BUILD_VARIANT'] + '|x64'
    print( "componentTests: Generating MSVS" + env['MSVS_VERSION'] + " project files for '%s'" % bvar )
    
    env.MSVSProject(target = 'componentTestsScons' + env['MSVSPROJECTSUFFIX'],
                    srcs = testsSrcFiles,
                    incs = testsIncFiles,
                    localincs = testsLocalInc,
                    resources = testsResource,
                    buildtarget = testsExe,
                    auto_build_solution = 0,
                    variant = bvar)

else:
    print( "CC is:", env['CC'] )
    print( "CXX is:", env['CXX'] )
